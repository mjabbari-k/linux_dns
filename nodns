#!/bin/bash

# Check for an active network connection (Wi-Fi or Ethernet)
CONNECTED_CONNECTION=$(nmcli -t -f NAME,DEVICE,STATE connection show --active | grep -E "wifi|ethernet" | grep -E "connected" | awk -F: '{print $1}' | head -n 1)

# If no active connection is found, try checking using `ip link` for interfaces with UP state
if [ -z "$CONNECTED_CONNECTION" ]; then
    echo "No active network connection found using nmcli, checking with ip link..."
    # Check if any interface is up and connected
    CONNECTED_INTERFACE=$(ip link show | grep -E "wlp|eth" | grep "state UP" | awk '{print $2}' | tr -d ':' | head -n 1)

    if [ -z "$CONNECTED_INTERFACE" ]; then
        echo "No active network connection found (either Wi-Fi or Ethernet)."
        exit 1
    else
        # Fetch the connection name corresponding to the active interface
        CONNECTED_CONNECTION=$(nmcli connection show | grep "$CONNECTED_INTERFACE" | awk '{print $1}' | head -n 1)
        echo "Active network interface detected: $CONNECTED_INTERFACE"
        echo "Active connection name: $CONNECTED_CONNECTION"
    fi
fi

# Display the active network connection name
echo "Active network connection detected: $CONNECTED_CONNECTION"

# Revert DNS to automatic (remove custom DNS)
echo "Reverting DNS to automatic for connection $CONNECTED_CONNECTION..."
nmcli connection modify "$CONNECTED_CONNECTION" ipv4.dns ""
nmcli connection modify "$CONNECTED_CONNECTION" ipv4.ignore-auto-dns no

# Restart the network connection to apply the DNS changes
echo "Restarting network connection to apply DNS changes..."
nmcli connection down "$CONNECTED_CONNECTION" && nmcli connection up "$CONNECTED_CONNECTION"

echo "DNS settings have been reverted to automatic successfully!"

