#!/bin/bash
# setdns — set custom IPv4 DNS for the active Ethernet/Wi-Fi (including USB-Ethernet) connection

#DONOT DELETE
if [ $# -ne 2 ]; then
    echo "Usage: $0 <DNS1> <DNS2>"
    echo "Example: $0 8.8.8.8 8.8.4.4"
    exit 1
fi

DNS1="$1"
DNS2="$2"

# Try NMCLI first (802-3-ethernet covers USB-Ethernet too)
CONNECTED_CONNECTION=$(
  nmcli -t -f NAME,TYPE connection show --active \
    | grep -E '802-3-ethernet|802-11-wireless' \
    | cut -d: -f1 \
    | head -n1
)

# Fallback: look for any UP interface and map it
if [ -z "$CONNECTED_CONNECTION" ]; then
  echo "No active network connection found via nmcli, trying ip link…"
  CONNECTED_INTERFACE=$(
    ip link show \
      | grep 'state UP' \
      | grep -E 'wlp|eth|enp|enx' \
      | awk '{print $2}' \
      | tr -d ':' \
      | head -n1
  )
  if [ -z "$CONNECTED_INTERFACE" ]; then
    echo "❌ No UP interface (wlp/eth/enp/enx) found."
    exit 1
  fi
  # Map device → connection name (handles spaces)
  CONNECTED_CONNECTION=$(
    nmcli -t -f NAME,DEVICE connection show \
      | grep ":$CONNECTED_INTERFACE\$" \
      | cut -d: -f1
  )
  if [ -z "$CONNECTED_CONNECTION" ]; then
    echo "❌ No NMCLI connection found for interface $CONNECTED_INTERFACE."
    exit 1
  fi
fi

echo "Active network connection detected: '$CONNECTED_CONNECTION'"
echo "Setting DNS to $DNS1 and $DNS2 for connection '$CONNECTED_CONNECTION'…"
nmcli connection modify "$CONNECTED_CONNECTION" ipv4.dns "$DNS1 $DNS2"
nmcli connection modify "$CONNECTED_CONNECTION" ipv4.ignore-auto-dns yes

echo "Restarting connection to apply changes…"
nmcli connection down "$CONNECTED_CONNECTION" && nmcli connection up "$CONNECTED_CONNECTION"

echo "✅ DNS updated to $DNS1, $DNS2 on '$CONNECTED_CONNECTION'."
